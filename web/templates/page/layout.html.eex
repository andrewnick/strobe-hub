<style>
  body, html {
  }
  body {
    /* position: fixed; */
  }
  #contents > * {
    -webkit-transform: translateZ(0);
  }
</style>
<script>
/*! iNoBounce - v0.1.0
 * https://github.com/lazd/iNoBounce/
 * Copyright (c) 2013 Larry Davis <lazdnet@gmail.com>; Licensed BSD
 */
(function(window) {
	// Stores the Y position where the touch started
	var startY = 0;

	var handleTouchmove = function(evt) {
		// Get the element that was scrolled upon
		var el = evt.target;

		// Check all parent elements for scrollability
		while (el !== document.body) {
			// Get some style properties
			var style = window.getComputedStyle(el);

			if (!style) {
				// If we've encountered an element we can't compute the style for, get out
				break;
			}

			// Ignore range input element
			if (el.nodeName === 'INPUT' && el.getAttribute('type') === 'range') {
				return;
			}

			var scrolling = style.getPropertyValue('-webkit-overflow-scrolling');
			var overflowY = style.getPropertyValue('overflow-y');

			// Determine if the element should scroll
			var isScrollable = scrolling === 'touch' && (overflowY === 'auto' || overflowY === 'scroll');
			var canScroll = el.scrollHeight > el.offsetHeight;

			if (isScrollable && canScroll) {
				// Get the current Y position of the touch
				var curY = evt.touches ? evt.touches[0].screenY : evt.screenY;

				// Determine if the user is trying to scroll past the top or bottom
				// In this case, the window will bounce, so we have to prevent scrolling completely
				var isAtTop = (startY <= curY && el.scrollTop === 0);
        var isAtBottom = (startY >= curY && el.scrollHeight - el.scrollTop === el.clientHeight);

				// Stop a bounce bug when at the bottom or top of the scrollable element
				if (isAtTop || isAtBottom) {
					evt.preventDefault();
				}

				// No need to continue up the DOM, we've done our job
				return;
			}

			// Test the next parent
			el = el.parentNode;
		}

		// Stop the bouncing -- no parents are scrollable
		evt.preventDefault();
	};

	var handleTouchstart = function(evt) {
		// Store the first Y position of the touch
		startY = evt.touches ? evt.touches[0].screenY : evt.screenY;
	};

  // Listen to a couple key touch events
  window.addEventListener('touchstart', handleTouchstart, false);
  window.addEventListener('touchmove', handleTouchmove, false);
}(window));
</script>
<div id="layout" style="display: flex; height: 100vh; max-height: 100vh; background: pink; flex-direction: column;">
  <div id="player" style="background: orange; flex: 0 0 60px;"></div>
  <div id="contents" style="background: yellow; flex: 1; max-width: 100vw; overflow: auto; overflow-x: hidden; overflow-y: auto;-webkit-overflow-scrolling: touch;">

    <div class="Container"><h1>Sticky Footer</h1><div class="Demo Demo--spaced"><p>Click the button below to hide the contents of this page. Notice how the footer sticks to the bottom of the window even when there’s not enough content to fill the page.</p><button id="collapse-trigger" class="Button"><span class="icon-refresh u-spaceRS"></span> Toggle Contents</button></div><div id="collapsable-content" class=""><p>Getting the footer to stick to the bottom of pages with sparse content is something just about every Web developer has tried to tackle at some point in his or her career. And, for the most part, it’s a solved problem. Yet all the <a href="http://ryanfait.com/resources/footer-stick-to-bottom-of-page/">existing solutions</a> have one significant shortcoming — they don’t work if the height of your footer is unknown.</p><p>Flexbox is a perfect fit for this type of problem. While mostly known for laying out content in the horizontal direction, Flexbox actually works just as well for vertical layout problems. All you have to do is wrap the vertical sections in a flex container and choose which ones you want to expand. They’ll automatically take up all the available space in their container.</p><p>In the example below, the container is set to the height of the window, and the content area is told to expand as needed. <em>(Note: in the vertical direction you need to specify a height for the container. This is different from the horizontal direction, which automatically expands to fit.)</em></p><h2>The HTML</h2><pre><code class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-title">body</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"Site"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">header</span>&gt;</span>…<span class="hljs-tag">&lt;/<span class="hljs-title">header</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">main</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"Site-content"</span>&gt;</span>…<span class="hljs-tag">&lt;/<span class="hljs-title">main</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">footer</span>&gt;</span>…<span class="hljs-tag">&lt;/<span class="hljs-title">footer</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span> </code></pre><h2>The CSS</h2><pre><code class="language-css"><span class="hljs-class">.Site</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> flex</span></span>; <span class="hljs-rule"><span class="hljs-attribute">min-height</span>:<span class="hljs-value"> <span class="hljs-number">100vh</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">flex-direction</span>:<span class="hljs-value"> column</span></span>; }</span> <span class="hljs-class">.Site-content</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">flex</span>:<span class="hljs-value"> <span class="hljs-number">1</span></span></span>; }</span> </code></pre><p>View the full <a href="https://github.com/philipwalton/solved-by-flexbox/blob/master/assets/css/components/site.css">source</a> for the <code>Site</code> component used in this demo on Github.</p><aside class="Notice"><strong>Note:</strong>&nbsp; the CSS required to make this demo work cross-browser is slightly different from the CSS shown in the example above, which assumes a fully spec-compliant browser. See the <a href="https://github.com/philipwalton/solved-by-flexbox/blob/master/assets/css/components/site.css">comments in the source</a> for more details.</aside></div><script class="js-allow-before-footer">!function(){var e=document.getElementById("collapse-trigger"),t=document.getElementById("collapsable-content"),n=!1;e.addEventListener("click",function(){n?t.classList.remove("u-hidden"):t.classList.add("u-hidden"),n=!n},!1)}()</script></div>

  </div>
  <div id="menu" style="background: green; flex: 0 0 60px; display: flex; flex-direction: row; align-items: stretch; justify-content: center;">
    <div style="flex: 1; text-align: center; margin: 0 2px; background: rgba(0, 0, 0, 0.1); display: flex; align-items: center; justify-content: center;">Player</div>
    <div style="flex: 1; text-align: center; margin: 0 2px; background: rgba(0, 0, 0, 0.1); display: flex; align-items: center; justify-content: center;">Channels</div>
    <div style="flex: 1; text-align: center; margin: 0 2px; background: rgba(0, 0, 0, 0.1); display: flex; align-items: center; justify-content: center;">Library</div>
    <div style="flex: 1; text-align: center; margin: 0 2px; background: rgba(0, 0, 0, 0.1); display: flex; align-items: center; justify-content: center;">Settings</div>
  </div>
</div>
